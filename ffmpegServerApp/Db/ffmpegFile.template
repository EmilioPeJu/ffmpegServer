# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, gda_name, Name to expose to GDA
# % gui, $(PORT), edmtab, ffmpegFile.edl, P=$(P),R=$(R)

# \file 
# ffmpegFile wraps the ffmpeg compression libraries in an areaDetector plugin.
# It works in much the same way as the other NDFile plugins. By default, it
# will try to guess the file format from the file extension, but you can force
# it to a particular file format with the FileFormat record.
# \section ffmpegStream_setup Setup
# - In the database, an instance of NDPluginBase is required, followed by an
# instance of NDFile, then an instance of this template. 
# - In the startup scripts, call ffmpegFileConfigure() once per ffmpegStream
# instance to setup the areadetector plugin
# - see \ref build_instructions
# \section ffmpegStream_screenshots Screenshots
# \htmlinclude flashvideo.html
# \image html ffmpegFileEdm.png "Edm screen for ffmpegFile"

# File data format 
# % gdatag, mbbinary, rw, $(gda_name=$(PORT)), FileFormat, Set FileFormat [[ffmpegFile]]
record(mbbo, "$(P)$(R)FileFormat")
{
    field(ZRST, "Auto")
    field(ZRVL, "0")
    field(ONST, "msmpeg4v2")
    field(ONVL, "1")
    field(TWST, "mpeg4")
    field(TWVL, "2")    
}

# File data format from driver
# % gdatag, mbbinary, ro, $(gda_name=$(PORT)), FileFormat_RBV, Readback for FileFormat [[ffmpegFile]]
record(mbbi, "$(P)$(R)FileFormat_RBV")
{
    field(ZRST, "Auto")
    field(ZRVL, "0")
    field(ONST, "MSMPEGV2")
    field(ONVL, "1")
    field(TWST, "H264")
    field(TWVL, "2") 
}

## FFMPEG Bitrate
# % gdatag, pv, rw, $(gda_name=$(PORT)), BITRATE, Set BITRATE [[ffmpegFile]]
record(ao, "$(P)$(R)BITRATE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_BITRATE")
  field(VAL, "100000")
  field(PINI, "YES")  
}

## FFMPEG Bitrate from driver
# % gdatag, pv, ro, $(gda_name=$(PORT)), BITRATE_RBV, Readback for BITRATE [[ffmpegFile]]
record(ai, "$(P)$(R)BITRATE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_BITRATE")
}

## FFMPEG Frames Per Second
# % gdatag, pv, rw, $(gda_name=$(PORT)), FPS, Set FPS [[ffmpegFile]]
record(ao, "$(P)$(R)FPS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_FPS")
  field(VAL, "25")
  field(PINI, "YES")  
}

## FFMPEG Frames Per Second from driver
# % gdatag, pv, ro, $(gda_name=$(PORT)), FPS_RBV, Readback for FPS [[ffmpegFile]]
record(ai, "$(P)$(R)FPS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_FPS")
}

## FFMPEG Width
# % gdatag, pv, rw, $(gda_name=$(PORT)), WIDTH, Set WIDTH [[ffmpegFile]]
record(ao, "$(P)$(R)WIDTH") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_WIDTH")
  field(VAL, "640")
  field(PINI, "YES")  
}

## FFMPEG Bitrate from driver
# % gdatag, pv, ro, $(gda_name=$(PORT)), WIDTH_RBV, Readback for WIDTH [[ffmpegFile]]
record(ai, "$(P)$(R)WIDTH_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_WIDTH")
}

## FFMPEG Width
# % gdatag, pv, rw, $(gda_name=$(PORT)), HEIGHT, Set HEIGHT [[ffmpegFile]]
record(ao, "$(P)$(R)HEIGHT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_HEIGHT")
  field(VAL, "480")
  field(PINI, "YES")  
}

## FFMPEG Bitrate from driver
# % gdatag, pv, ro, $(gda_name=$(PORT)), HEIGHT_RBV, Readback for HEIGHT [[ffmpegFile]]
record(ai, "$(P)$(R)HEIGHT_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_HEIGHT")
}
# \section License
# Author: Diamond Light Source, Copyright 2010
#
# 'ffmpegServer' is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# 'ffmpegServer' is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with 'ffmpegServer'.  If not, see http://www.gnu.org/licenses/.
