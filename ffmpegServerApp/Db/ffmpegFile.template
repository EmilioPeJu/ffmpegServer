# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % gui, $(PORT), edmtab, ffmpegFile.edl, P=$(P),R=$(R)

# # \file 
# # ffmpegFile wraps the ffmpeg compression libraries in an areaDetector plugin.
# # It works in much the same way as the other NDFile plugins. By default, it
# # will try to guess the file format from the file extension, but you can force
# # it to a particular file format with the FileFormat record.
# # \section ffmpegStream_setup Setup
# # - In the database, an instance of NDPluginBase is required, followed by an
# # instance of NDFile, then an instance of this template. 
# # - In the startup scripts, call ffmpegFileConfigure() once per ffmpegStream
# # instance to setup the areadetector plugin
# # - see \ref build_instructions
# # \section ffmpegStream_screenshots Screenshots
# # \htmlinclude flashvideo.html
# # \image html ffmpegFileEdm.png "Edm screen for ffmpegFile"

# This associates a BOY screen with the template
# % gui, $(PORT), boydetail,ffmpegServerApp_opi/fimg_detail.opi, P=$(P), R=$(R), DESC=MPEG File
# % gui, $(PORT), boyembed, ffmpegServerApp_opi/fimg_embed_box.opi, P=$(P), R=$(R), DESC=MPEG File
# % gui, $(PORT), boyembed, ffmpegServerApp_opi/fimg_embed.opi, P=$(P), R=$(R), DESC=MPEG File

# Info
# % gui, $(PORT), readback, Port name,   $(P)$(R)PortName_RBV
# % gui, $(PORT), readback, Plugin type,   $(P)$(R)PluginType_RBV
# Input
# % gui, $(PORT), demand, Input,   $(P)$(R)NDArrayPort
# % gui, $(PORT), readback, Input,   $(P)$(R)NDArrayPort_RBV
# % gui, $(PORT), enum, Callbacks,   $(P)$(R)EnableCallbacks
# % gui, $(PORT), readback, Callbacks,   $(P)$(R)EnableCallbacks_RBV
# % gui, $(PORT), demand, Min Time,   $(P)$(R)MinCallbackTime
# % gui, $(PORT), readback, Min Time,   $(P)$(R)MinCallbackTime_RBV
# % gui, $(PORT), enum, Blocking,   $(P)$(R)BlockingCallbacks
# % gui, $(PORT), readback, Blocking,   $(P)$(R)BlockingCallbacks_RBV
# % gui, $(PORT), demand, Array counter,   $(P)$(R)ArrayCounter
# % gui, $(PORT), readback, Array counter,   $(P)$(R)ArrayCounter_RBV
# % gui, $(PORT), readback, Array rate,   $(P)$(R)ArrayRate_RBV
# % gui, $(PORT), readback, Queue use,   $(P)$(R)QueueUse
# % gui, $(PORT), readback, Queue size,   $(P)$(R)QueueSize
# % gui, $(PORT), demand, Dropped,   $(P)$(R)DroppedArrays
# % gui, $(PORT), readback, Dropped,   $(P)$(R)DroppedArrays_RBV
# % gui, $(PORT), readback, Num Dimensions,   $(P)$(R)NDimensions_RBV
# % gui, $(PORT), readback, Dim 0 size,   $(P)$(R)ArraySize0_RBV
# % gui, $(PORT), readback, Dim 1 size,   $(P)$(R)ArraySize1_RBV
# % gui, $(PORT), readback, Dim 2 size,   $(P)$(R)ArraySize2_RBV
# % gui, $(PORT), readback, In data type,   $(P)$(R)DataType_RBV
# % gui, $(PORT), readback, Colour mode,   $(P)$(R)ColorMode_RBV
# % gui, $(PORT), readback, Bayer pattern,   $(P)$(R)BayerPattern_RBV
# % gui, $(PORT), readback, Unique id,   $(P)$(R)UniqueId_RBV
# % gui, $(PORT), readback, Timestamp,   $(P)$(R)TimeStamp_RBV
# File
# % gui, $(PORT), demand, File path,   $(P)$(R)FilePath
# % gui, $(PORT), readback, File path RBV,   $(P)$(R)FilePath_RBV
# % gui, $(PORT), readback, File path exists,   $(P)$(R)FilePathExists_RBV
# % gui, $(PORT), demand, File name,   $(P)$(R)FileName
# % gui, $(PORT), readback, File name,   $(P)$(R)FileName_RBV
# % gui, $(PORT), demand, File number,   $(P)$(R)FileNumber
# % gui, $(PORT), readback, File number,   $(P)$(R)FileNumber_RBV
# % gui, $(PORT), enum, Auto increment,   $(P)$(R)AutoIncrement
# % gui, $(PORT), readback, Auto increment,   $(P)$(R)AutoIncrement_RBV
# % gui, $(PORT), demand, File format,   $(P)$(R)FileTemplate
# % gui, $(PORT), readback, File format,   $(P)$(R)FileTemplate_RBV
# % gui, $(PORT), demand, N to capture,   $(P)$(R)NumCapture
# % gui, $(PORT), readback, N to capture,   $(P)$(R)NumCapture_RBV
# % gui, $(PORT), readback, N captured,   $(P)$(R)NumCaptured_RBV
# % gui, $(PORT), enum, Auto save,   $(P)$(R)AutoSave
# % gui, $(PORT), readback, Auto save,   $(P)$(R)AutoSave_RBV
# % gui, $(PORT), enum, Capture mode,   $(P)$(R)FileWriteMode
# % gui, $(PORT), readback, Capture mode,   $(P)$(R)FileWriteMode_RBV
# % gui, $(PORT), enum, Capture,   $(P)$(R)Capture
# % gui, $(PORT), readback, Capture,   $(P)$(R)Capture_RBV
# % gui, $(PORT), readback, Write message,   $(P)$(R)WriteMessage
# % gui, $(PORT), readback, Write status,   $(P)$(R)WriteStatus
# % gui, $(PORT), readback, Write filename,   $(P)$(R)FullFileName_RBV
# % gui, $(PORT), enum, Lazy open,   $(P)$(R)LazyOpen
# % gui, $(PORT), readback, Lazy open,   $(P)$(R)LazyOpen_RBV
# % gui, $(PORT), demand, Temporary suffix,   $(P)$(R)TempSuffix
# % gui, $(PORT), readback, Temporary suffix,   $(P)$(R)TempSuffix_RBV
# % gui, $(PORT), demand, Create directories,   $(P)$(R)CreateDirectory
# % gui, $(PORT), readback, Create directories,   $(P)$(R)CreateDirectory_RBV
# Video
# % gui, $(PORT), demand, Bit rate,   $(P)$(R)BITRATE
# % gui, $(PORT), readback, Bit rate,   $(P)$(R)BITRATE_RBV
# % gui, $(PORT), demand, Frame rate,   $(P)$(R)FPS
# % gui, $(PORT), readback, Frame rate,   $(P)$(R)FPS_RBV
# % gui, $(PORT), demand, Width,   $(P)$(R)WIDTH
# % gui, $(PORT), readback, Width,   $(P)$(R)WIDTH_RBV
# % gui, $(PORT), demand, Height,   $(P)$(R)HEIGHT
# % gui, $(PORT), readback, Height,   $(P)$(R)HEIGHT_RBV
# Memory
# % gui, $(PORT), readback, Max memory,   $(P)$(R)PoolMaxMem
# % gui, $(PORT), readback, Max buffers,   $(P)$(R)PoolMaxBuffers
# % gui, $(PORT), readback, Used memory,   $(P)$(R)PoolUsedMem
# % gui, $(PORT), readback, Allocated buffers,   $(P)$(R)PoolAllocBuffers
# % gui, $(PORT), readback, Free buffers,   $(P)$(R)PoolFreeBuffers

include "NDFile.template"
include "NDPluginBase.template"

# # File data format 
record(mbbo, "$(P)$(R)FileFormat")
{
    field(ZRST, "Auto")
    field(ZRVL, "0")
}

# # File data format from driver
record(mbbi, "$(P)$(R)FileFormat_RBV")
{
    field(ZRST, "Auto")
    field(ZRVL, "0")
}

record(bo, "$(P)$(R)AutoSave")
{
    field(VAL,  "0")
}

record(mbbo, "$(P)$(R)FileWriteMode")
{
    field(VAL, "2")
}

record(longout, "$(P)$(R)NumCapture")
{
    field(VAL,  "-1")
}

# # FFMPEG Bitrate
record(ao, "$(P)$(R)BITRATE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_BITRATE")
  field(VAL, "10000000")
  field(PINI, "YES")  
}

# # FFMPEG Bitrate from driver
record(ai, "$(P)$(R)BITRATE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_BITRATE")
}

# # FFMPEG Frames Per Second
record(ao, "$(P)$(R)FPS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_FPS")
  field(VAL, "25")
  field(PINI, "YES")  
}

# # FFMPEG Frames Per Second from driver
record(ai, "$(P)$(R)FPS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_FPS")
}

# # FFMPEG Width
record(ao, "$(P)$(R)WIDTH") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_WIDTH")
  field(VAL, "640")
  field(PINI, "YES")  
  info(autosaveFields, "VAL")
}

# # FFMPEG Width from driver
record(ai, "$(P)$(R)WIDTH_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_WIDTH")
}

# # FFMPEG Height
record(ao, "$(P)$(R)HEIGHT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_HEIGHT")
  field(VAL, "480")
  field(PINI, "YES")  
  info(autosaveFields, "VAL")
}

# # FFMPEG Height from driver
record(ai, "$(P)$(R)HEIGHT_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_HEIGHT")
}
