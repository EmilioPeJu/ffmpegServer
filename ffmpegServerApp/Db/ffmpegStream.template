# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, QUALITY, Jpeg Quality in percent
# % macro, MAXW, Maximum Jpeg Width
# % macro, MAXH, Maximum Jpeg Height
# % gui, $(PORT), edmtab, ffmpegStream.edl, P=$(P),R=$(R)

# # \file 
# # ffmpegServer contains a very simple http server based on
# # <a href="http://www.nulllogic.ca/httpd">nullhttpd</a>. If a file named 
# # \<port\>.jpg is requested for any ffmpegStream object named \<port\>, then it 
# # will return the last NDArray received by the object compressed to jpeg. If 
# # \<port\>.mjpg is requested then it will return an mjpg stream over http to the
# # client. Otherwise, it will return an index page listing all the available 
# # streams.
# # \section ffmpegStream_setup Setup
# # - In the database, an instance of NDPluginBase is required, followed by an
# # instance of this template. 
# # - In the startup scripts, call ffmpegServerConfigure() once per IOC to setup 
# # the http server, then call ffmpegStreamConfigure() once per ffmpegStream
# # instance to setup the areadetector plugin
# # - see \ref build_instructions
# # \section ffmpegStream_screenshots Screenshots
# # \image html server.png "Index page for ffmpegServer"
# # \image html ffmpegStreamEdm.png "Edm screen for ffmpegStream"

# This associates a BOY screen with the template
# % gui, $(PORT), boydetail,ffmpegServerApp_opi/mjpg_detail.opi, P=$(P), R=$(R), DESC=MPEG Viewer
# % gui, $(PORT), boyembed, ffmpegServerApp_opi/mjpg_embed_box.opi, P=$(P), R=$(R), DESC=MPEG Viewer
# % gui, $(PORT), boyembed, ffmpegServerApp_opi/mjpg_embed.opi, P=$(P), R=$(R), DESC=MPEG Viewer

# Info
# % gui, $(PORT), readback, Port name,   $(P)$(R)PortName_RBV
# % gui, $(PORT), readback, Plugin type,   $(P)$(R)PluginType_RBV
# Input
# % gui, $(PORT), demand, Input,   $(P)$(R)NDArrayPort
# % gui, $(PORT), readback, Input,   $(P)$(R)NDArrayPort_RBV
# % gui, $(PORT), enum, Callbacks,   $(P)$(R)EnableCallbacks
# % gui, $(PORT), readback, Callbacks,   $(P)$(R)EnableCallbacks_RBV
# % gui, $(PORT), demand, Min Time,   $(P)$(R)MinCallbackTime
# % gui, $(PORT), readback, Min Time,   $(P)$(R)MinCallbackTime_RBV
# % gui, $(PORT), enum, Blocking,   $(P)$(R)BlockingCallbacks
# % gui, $(PORT), readback, Blocking,   $(P)$(R)BlockingCallbacks_RBV
# % gui, $(PORT), demand, Array counter,   $(P)$(R)ArrayCounter
# % gui, $(PORT), readback, Array counter,   $(P)$(R)ArrayCounter_RBV
# % gui, $(PORT), readback, Array rate,   $(P)$(R)ArrayRate_RBV
# % gui, $(PORT), readback, Queue use,   $(P)$(R)QueueUse
# % gui, $(PORT), readback, Queue size,   $(P)$(R)QueueSize
# % gui, $(PORT), demand, Dropped,   $(P)$(R)DroppedArrays
# % gui, $(PORT), readback, Dropped,   $(P)$(R)DroppedArrays_RBV
# % gui, $(PORT), readback, Num Dimensions,   $(P)$(R)NDimensions_RBV
# % gui, $(PORT), readback, Dim 0 size,   $(P)$(R)ArraySize0_RBV
# % gui, $(PORT), readback, Dim 1 size,   $(P)$(R)ArraySize1_RBV
# % gui, $(PORT), readback, Dim 2 size,   $(P)$(R)ArraySize2_RBV
# % gui, $(PORT), readback, In data type,   $(P)$(R)DataType_RBV
# % gui, $(PORT), readback, Colour mode,   $(P)$(R)ColorMode_RBV
# % gui, $(PORT), readback, Bayer pattern,   $(P)$(R)BayerPattern_RBV
# % gui, $(PORT), readback, Unique id,   $(P)$(R)UniqueId_RBV
# % gui, $(PORT), readback, Timestamp,   $(P)$(R)TimeStamp_RBV
# Video
# % gui, $(PORT), readback, Host,   $(P)$(R)HOST_RBV
# % gui, $(PORT), readback, Host port,   $(P)$(R)HTTP_PORT_RBV
# % gui, $(PORT), readback, Num clients,   $(P)$(R)CLIENTS_RBV
# % gui, $(PORT), demand, JPEG Quality,   $(P)$(R)QUALITY
# % gui, $(PORT), readback, JPEG Quality,   $(P)$(R)QUALITY_RBV
# % gui, $(PORT), demand, Max width,   $(P)$(R)MAXW
# % gui, $(PORT), readback, Max width,   $(P)$(R)MAXW_RBV
# % gui, $(PORT), demand, Max height,   $(P)$(R)MAXH
# % gui, $(PORT), readback, Max height,   $(P)$(R)MAXH_RBV
# % gui, $(PORT), enum, Always on,   $(P)$(R)ALWAYS_ON
# % gui, $(PORT), readback, Always on,   $(P)$(R)ALWAYS_ON_RBV
# % gui, $(PORT), readback, Snapshot URL,   $(P)$(R)JPG_URL_RBV
# % gui, $(PORT), readback, Streaming URL,   $(P)$(R)MJPG_URL_RBV
# % gui, $(PORT), enum, Show grid,   $(P)$(R)GRID
# % gui, $(PORT), demand, X Position,   $(P)$(R)GX
# % gui, $(PORT), demand, Y Position,   $(P)$(R)GY
# % gui, $(PORT), demand, Spacing,   $(P)$(R)GS
# % gui, $(PORT), demand, Colour RGB,   $(P)$(R)GCOL
# Memory
# % gui, $(PORT), readback, Max memory,   $(P)$(R)PoolMaxMem
# % gui, $(PORT), readback, Max buffers,   $(P)$(R)PoolMaxBuffers
# % gui, $(PORT), readback, Used memory,   $(P)$(R)PoolUsedMem
# % gui, $(PORT), readback, Allocated buffers,   $(P)$(R)PoolAllocBuffers
# % gui, $(PORT), readback, Free buffers,   $(P)$(R)PoolFreeBuffers

# All tags starting with gdatag are DLS specific for GDA
# % gdatag, template, ffmpegStream, $(PORT)_ffmpegStream, $(PORT) ffmpegStream class instance

include "NDPluginBase.template"

# # JPEG Quality
record(ao, "$(P)$(R)QUALITY") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_QUALITY")
  field(VAL, "$(QUALITY=100)")
  field(DRVH, "100")
  field(DRVL, "0")          
  field(PINI, "1")  
}

# # JPEG Quality Readback from driver
record(ai, "$(P)$(R)QUALITY_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_QUALITY")
}

# # Maximum jpg width
record(ao, "$(P)$(R)MAXW") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_MAXW")
  field(VAL, "$(MAXW=1600)")
  field(PINI, "1")  
}

# # Maximum jpg width Readback from driver
record(ai, "$(P)$(R)MAXW_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_MAXW")
}

# # Maximum jpg width
record(ao, "$(P)$(R)MAXH") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_MAXH")
  field(VAL, "$(MAXH=1200)")
  field(PINI, "1")  
}

# # Maximum jpg width Readback from driver
record(ai, "$(P)$(R)MAXH_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_MAXH")
}


# # Toggle False colour mode 
record(bo, "$(P)$(R)FALSE_COL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_FALSE_COL")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(VAL, "0")
  field(PINI, "1")  
}

# # False colour mode readback from driver
record(bi, "$(P)$(R)FALSE_COL_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_FALSE_COL")
  field(ZNAM, "Off")
  field(ONAM, "On") 
}

# # Always produce jpegs, even when no-one is listening
record(bo, "$(P)$(R)ALWAYS_ON") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FFMPEG_ALWAYS_ON")
  field(ZNAM, "Off")
  field(ONAM, "On") 
  field(VAL, "0")  
  field(PINI, "1")  
}

# # Always on readback from driver
record(bi, "$(P)$(R)ALWAYS_ON_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FFMPEG_ALWAYS_ON")
  field(ZNAM, "Off")
  field(ONAM, "On") 
}

# # HTTP Port to connect an mjpg viewer to
record(ai, "$(P)$(R)HTTP_PORT_RBV")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT) 0)FFMPEG_HTTP_PORT")
    field(SCAN, "I/O Intr")
}

# # Hostname of the HTTP server
record(stringin, "$(P)$(R)HOST_RBV")
{
    field(PINI, "1")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)FFMPEG_HOST")
    field(SCAN, "I/O Intr")
}

# # Number of clients
record(ai, "$(P)$(R)CLIENTS_RBV")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT) 0)FFMPEG_CLIENTS")
    field(SCAN, "I/O Intr")
}

# # URL of the jpg snapshot
record(waveform, "$(P)$(R)JPG_URL_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)FFMPEG_JPG_URL")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# # URL of the mjpg stream
record(waveform, "$(P)$(R)MJPG_URL_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT) 0)FFMPEG_MJPG_URL")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

#% autosave 2
#% archiver 10 Monitor
record(longout, "$(P)$(R)GX") {
    field(VAL, "100")
    field(PINI, "1")
}

#% autosave 2
#% archiver 10 Monitor
record(longout, "$(P)$(R)GY") {
    field(VAL, "100")
    field(PINI, "1")
}

#% autosave 2
#% archiver 10 Monitor
record(bo, "$(P)$(R)GRID") {
    field(VAL, "0")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(PINI, "1")
}

#% autosave 2
#% archiver 10 Monitor
# default white
record(longout, "$(P)$(R)GCOL") {
    field(VAL, "0xFFFFFF")
    field(PINI, "1")
}

#% autosave 2
#% archiver 10 Monitor
record(longout, "$(P)$(R)GS") {
    field(VAL, "200")
    field(DRVL, "10")    
    field(DRVH, "2000")
    field(PINI, "1")
}
